#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iron-assignments:server');
var http = require('http');
var https = require('https');
var config = require('../lib/config');
var logger = require('../lib/logger');

app.set('port', config.webserver.proxyPort);

/**
 * Create HTTP server.
 */
if(config.webserver.http) {
	var httpPort = normalizePort(process.env.PORT || config.webserver.http.proxyPort || '3000');
	var httpServer = http.createServer(app);
	var httpEvents = new Events(httpPort, httpServer);
	httpServer.listen(httpPort);
	httpServer.on('error', httpEvents.onError);
	httpServer.on('listening', httpEvents.onListening);
}

/**
 * Create HTTPS server.
 */
if(config.webserver.https) {
	var fs = require('fs');
	var error = false;
	try {
		var privateKey = fs.readFileSync(config.webserver.https.keyPath).toString();
	}
	catch(e) {
		error = true;
		if(e.code === 'ENOENT') {
			logger.error('https key file does not exist: %s', config.webserver.https.keyPath);
		}
		else {
			logger.error(e.toString());
		}
	}
	try {
		var certificate = fs.readFileSync(config.webserver.https.certPath).toString();
	}
	catch(e) {
		error = true;
		if(e.code === 'ENOENT') {
			logger.error('https certificate file does not exist %s', config.webserver.https.certPath);
		}
		else {
			logger.error(e.toString());
		}
	}

	if(!error) {
		var httpsPort = normalizePort(config.webserver.https.proxyPort);
		var httpsServer = https.createServer({key: privateKey, cert: certificate}, app);
		var httpsEvents = new Events(httpsPort, httpsServer);
		httpsServer.listen(httpsPort);
		httpsServer.on('error', httpsEvents.onError);
		httpsServer.on('listening', httpsEvents.onListening);
	} 
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

function Events(port, server) {
	/**
	 * Event listener for HTTP server "error" event.
	 */

	this.onError = function(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				logger.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				logger.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	};

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	this.onListening = function() {
		var addr = server.address();
		var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	};
}
